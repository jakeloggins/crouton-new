link(rel="import", href="/static/common/bower/polymer/polymer.html")
link(rel="import", href="/app-render/framework/crouton-card/crouton-card.jade")

dom-module(id="crouton-dashboard")
  template
    link(rel="stylesheet", href="crouton-dashboard.css")
    template(is="dom-if" if="{{!numberOfCards}}")
      div(on-click="test").noCards Uh oh, no devices to display
    div#crouton-dashboard-container


  style(is="custom-style").
    paper-input{
      --paper-input-container-focus-color: grey;
    }


  script.
    (function() {
      Polymer({
        is: "crouton-dashboard",
        ready: function() {
          this.cardPrefix = "crouton-";
          this.cardIndex = {};
          this.cardValues = {};
          this.cardsToBeAdded = [];

          var that = this;
          window.addEventListener("crouton-import-loaded", function(event) {
            that.push("loadedComponents",event.card);
            var index = that.loadingComponents.indexOf(event.card)
            if(index > -1){
              that.splice("loadingComponents", index, 1);
            }
          });
        },
        properties: {
          currentPage: {
            type: String,
            value: "",
            observer: "displayCheck"
          }
        },
        attached: function(){
          this.loadedComponents = [];
          this.loadingComponents = [];
          this.container = document.getElementById("crouton-dashboard-container");
          this.numberOfCards = 0;

          this.pckry = new Packery(this.container, {
            columnWidth: 250,
            rowHeight: 250,
            gutter: 20
          });

          //- var $grid = $('#crouton-dashboard-container').packery({
          //-   //itemSelector: '.grid-item',
          //-   // columnWidth helps with drop positioning
          //-   columnWidth: 100
          //- });
        },
        updateValue: function(device,address,json){
          if(this.cardValues[device+address]){
            var cardValue = this.cardValues[device+address];
            var update = false;
            for (var property in json){
              if(cardValue.hasOwnProperty(property)){
                try {
                  this.cardIndex[device+address].set("endPointJson.values."+property, json[property]);
                }
                catch(err) {
                }
              }
            }
          }
        },
        addDevice: function(device,deviceJson){
          for (var address in deviceJson.endPoints){
            if (deviceJson.endPoints.hasOwnProperty(address)) {
              var elementName = deviceJson.endPoints[address]["card-type"];
              //If component has not been load, load it
              if(this.loadedComponents.indexOf(elementName) == -1){
                if(this.loadingComponents.indexOf(elementName) == -1){
                  var path = "app-render/dashboard-elements/";
                  var elementImport = document.createElement("link");
                  elementImport.rel = "import";
                  elementImport.href = path + elementName + "/" + elementName + ".jade";
                  elementImport.setAttribute("onload","handleLoad(event)");

                  document.head.appendChild(elementImport);
                  this.push("loadingComponents",elementName);
                }
              }

              var element = document.createElement(elementName);
              element.setAttribute("id", this.cardId(device,address));
              element.setAttribute("device-name", device);
              element.setAttribute("end-point-name", address);
              element.setAttribute("end-point-json", JSON.stringify(deviceJson.endPoints[address]));

              element.style.opacity = "0";
              this.push("cardsToBeAdded",{element: element, card: elementName});

              this.cardIndex[device+address] = element;
              this.cardValues[device+address] = deviceJson.endPoints[address].values;
              this.numberOfCards = this.numberOfCards + 1;
            }
          }

          if(this.currentPage == "dashboard"){
            this.async(this.addPackeryCards,2000);
          }
        },
        removeDeviceEndPoint: function(device,address,alreadyRemoved){
          this.pckry.remove(this.cardIndex[device+address]);
          this.container.removeChild(this.cardIndex[device+address]);
          this.relayout();

          delete this.cardIndex[device+address];
          delete this.cardValues[device+address];
          if(!alreadyRemoved){
            this.numberOfCards = this.numberOfCards - 1;
          }
        },
        displayCheck: function(newValue){
          if(newValue == "dashboard"){
            this.addPackeryCards();
          }
        },
        cardId: function(device, address){
          return this.cardPrefix + device + "-" + address
        },
        relayout: function(element){
          if(element){
            //- this.container.appendChild(element);
            //- this.pckry.appended(element);

            //- var str1 = "#";
            //- var elemselector = str1.concat(this.pckry.element.lastChild.id);
            //- console.log(this.pckry.element.lastChild.id);

            // http://codepen.io/desandro/pen/znAuH
  
              //- for ( var i=0, len = this.pckry.element.childNodes.length; i < len; i++ ) {
              //-   var item = this.pckry.element.childNodes[i];
              //-   var draggie = new Draggabilly( item, {
              //-     handle: '.dragger'
              //-   });
              //- }

            //- var debug = this.pckry.getItemElements();
            //- //console.log(debug)



            //- // http://draggabilly.desandro.com/
            //- // if you have multiple .draggable elements
            //- // get all draggie elements
            //- //var draggableElems = document.querySelectorAll('.dragselect');
            //- // array of Draggabillies
            //- var draggies = []
            //- // init Draggabillies
            //- for ( var i=0, len = this.pckry.element.childNodes.length; i < len; i++ ) {
            //-   var draggableElem = this.pckry.element.childNodes[i];
            //-   var draggie = new Draggabilly( draggableElem, {
            //-     // options...
            //-     handle: '.dragger'
            //-   });
            //-   draggies.push( draggie );
            //- }


            // for some reason this handle thing doesn't work in firefox
            //- var draggie = new Draggabilly(element, {
            //-     handle: '.dragselect'
            //- }); 

            //- // no handle method
            //- var draggie = new Draggabilly(element);

            //this.pckry.bindDraggabillyEvents(draggie);



            element.style.opacity = "1";
            this.pckry.layout();
          } else {
              if(this.pckry){
                this.pckry.layout();
              }
          }
        },
        addPackeryCards: function(){
          if(window.getComputedStyle(document.getElementById("dashboardHolder"),null).getPropertyValue("display") != "none"){
            if(this.cardsToBeAdded[0]){
              for(var card = 0; card < this.cardsToBeAdded.length; card){
                if(this.loadedComponents.indexOf(this.cardsToBeAdded[card].card) > -1){
                  //this.relayout(this.cardsToBeAdded[card].element);
                    var element = this.cardsToBeAdded[card].element;
                    this.container.appendChild(element);
                    this.pckry.appended(element);
                    element.style.opacity = "1";
                    //- this.pckry.layout();
                  this.splice("cardsToBeAdded", card, 1);
                } else {
                  card = card + 1;
                }
              }
              //- // once all the cards have been added, make them all draggable
              //- console.log(this.pckry.getItemElements()[1])
              //- this.pckry.getItemElements().forEach( function( itemElem ) {
              //-   var draggie = new Draggabilly(itemElem, {
              //-     handle: '.dragger'
              //-   });
              //-   //this.pckry.bindDraggabillyEvents(draggie);
              //- });

              // if you have multiple .draggable elements
              // get all draggie elements
              // init Draggabillies
              var itemElem = this.pckry.getItemElements();
              for ( var i=0, len = this.pckry.getItemElements().length; i < len; i++ ) {
                var draggie = new Draggabilly( itemElem[i], {
                  // options...
                  handle: '.dragger'
                });
                this.pckry.bindDraggabillyEvents(draggie);
              }


              this.pckry.layout();


              //- var draggie = new Draggabilly(this.cardsToBeAdded[card].element, {
              //-     handle: '.dragger'
              //- });
              //- this.pckry.bindDraggabillyEvents(draggie);

              if(this.cardsToBeAdded[0]){
                this.async(this.addPackeryCards,100);
              }
              this.async(this.relayout,500);
            } else {
              this.relayout();
            }
          } else {
            this.async(this.addPackeryCards,100);
          }
        }
      });
    }());
