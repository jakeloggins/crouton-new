link(rel="import", href="/static/common/bower/polymer/polymer.html")
link(rel="import", href="/app-render/framework/crouton-card/crouton-card.jade")

dom-module(id="crouton-dashboard")
  template
    link(rel="stylesheet", href="crouton-dashboard.css")
    template(is="dom-if" if="{{!numberOfCards}}")
      div(on-click="test").noCards Uh oh, no devices to display
    div#crouton-dashboard-container


  style(is="custom-style").
    paper-input{
      --paper-input-container-focus-color: grey;
    }


  script.
    var gridster;
    var row_count = 1;
    var col_count = 1;
    var widgets = [];
    (function() {
      Polymer({
        is: "crouton-dashboard",
        ready: function() {
          this.cardPrefix = "crouton-";
          this.cardIndex = {};
          this.cardValues = {};
          this.cardsToBeAdded = [];

          var that = this;
          window.addEventListener("crouton-import-loaded", function(event) {
            that.push("loadedComponents",event.card);
            var index = that.loadingComponents.indexOf(event.card)
            if(index > -1){
              that.splice("loadingComponents", index, 1);
            }
          });
        },
        properties: {
          currentPage: {
            type: String,
            value: "",
            observer: "displayCheck"
          }
        },
        attached: function(){
          this.loadedComponents = [];
          this.loadingComponents = [];
          this.container = document.getElementById("crouton-dashboard-container");
          this.numberOfCards = 0;

          //- this.pckry = new Packery(this.container, {
          //-   columnWidth: 250,
          //-   rowHeight: 250,
          //-   gutter: 20
          //- });
          gridster = $("#crouton-dashboard-container").gridster({
            widget_base_dimensions: [250, 250],
            widget_margins: [10, 10],
            avoid_overlapped_widgets: true,
            min_cols: 5,
            //- max_cols: 6,
            autogrow_cols: true,
            autogenerate_stylesheet: true,
            draggable: {
              handle: '.dragger'
            }
          }).data('gridster');
          //$('#crouton-dashboard-container').css({'width': $(window).width()});
          //gridster.generate_grid_and_stylesheet();
          //console.log($(window).width());

        },
        updateValue: function(device,address,json){
          if(this.cardValues[device+address]){
            var cardValue = this.cardValues[device+address];
            var update = false;
            for (var property in json){
              if(cardValue.hasOwnProperty(property)){
                try {
                  this.cardIndex[device+address].set("endPointJson.values."+property, json[property]);
                }
                catch(err) {
                }
              }
            }
          }
        },
        addDevice: function(device,deviceJson){
          for (var address in deviceJson.endPoints){
            if (deviceJson.endPoints.hasOwnProperty(address)) {
              var elementName = deviceJson.endPoints[address]["card-type"];
              //If component has not been load, load it
              if(this.loadedComponents.indexOf(elementName) == -1){
                if(this.loadingComponents.indexOf(elementName) == -1){
                  var path = "app-render/dashboard-elements/";
                  var elementImport = document.createElement("link");
                  elementImport.rel = "import";
                  elementImport.href = path + elementName + "/" + elementName + ".jade";
                  elementImport.setAttribute("onload","handleLoad(event)");
                  document.head.appendChild(elementImport);
                  this.push("loadingComponents",elementName);
                }
              }

              var element = document.createElement(elementName);
              element.setAttribute("id", this.cardId(device,address));
              element.setAttribute("device-name", device);
              element.setAttribute("device-path", deviceJson.path);
              element.setAttribute("end-point-name", address);
              element.setAttribute("end-point-json", JSON.stringify(deviceJson.endPoints[address]));

              element.style.opacity = "0";
              this.push("cardsToBeAdded",{element: element, card: elementName});

              this.cardIndex[device+address] = element;
              this.cardValues[device+address] = deviceJson.endPoints[address].values;
              this.numberOfCards = this.numberOfCards + 1;
            }
          }

          if(this.currentPage == "dashboard"){
            this.async(this.addPackeryCards,2000);
          }
        },
        removeDeviceEndPoint: function(device,address,alreadyRemoved){
          //this.pckry.remove(this.cardIndex[device+address]);
          gridster.remove_widget(this.cardIndex[device+address]);
          this.container.removeChild(this.cardIndex[device+address]);

          delete this.cardIndex[device+address];
          delete this.cardValues[device+address];
          if(!alreadyRemoved){
            this.numberOfCards = this.numberOfCards - 1;
          }
        },
        displayCheck: function(newValue){
          if(newValue == "dashboard"){
            this.addPackeryCards();
          }
        },
        cardId: function(device, address){
          return this.cardPrefix + device + "-" + address
        },
        relayout: function(element){
          element.style.opacity = "1";
        },
        addPackeryCards: function(){
          if(window.getComputedStyle(document.getElementById("dashboardHolder"),null).getPropertyValue("display") != "none"){
            if(this.cardsToBeAdded[0]){
              for(var card = 0; card < this.cardsToBeAdded.length; card){
                if(this.loadedComponents.indexOf(this.cardsToBeAdded[card].card) > -1){
                    var element = this.cardsToBeAdded[card].element;
                    this.container.appendChild(element);
                    element.style.opacity = "1";
                    // manage size x and size y data attributes for gridster
                    var size_x;
                    if (this.cardsToBeAdded[card].card == "crouton-chart-line") {
                      size_x = 2;
                    } else {
                      size_x = 1;
                    } 
                    //widgets = [element, 1, 1, col_count, row_count];
                    widgets = [element, size_x, 1];
                    gridster.add_widget.apply(gridster, widgets);

                    //this.pckry.appended(element);
                  this.splice("cardsToBeAdded", card, 1);
                } else {
                  card = card + 1;
                }
              }
              //gridster.generate_grid_and_stylesheet();
              //- $("#crouton-dashboard-container").gridster({
              //-   widget_base_dimensions: [250, 250],
              //-   widget_margins: [20, 20],
              //-   draggable: {
              //-     handle: '.dragger'
              //-   }
              //- })
              if(this.cardsToBeAdded[0]){
                this.async(this.addPackeryCards,100);
              }
            }
          } else {
            this.async(this.addPackeryCards,100);
          }
        }
      });
    }());
