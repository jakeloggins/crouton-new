link(rel="import", href="/static/common/bower/polymer/polymer.html")
link(rel="import", href="/static/common/bower/paper-input/paper-input.html")
link(rel="import", href="/static/common/bower/paper-button/paper-button.html")

link(rel="import", href="/static/common/bower/paper-item/paper-item.html")
link(rel="import", href="/static/common/bower/paper-listbox/paper-listbox.html")
link(rel="import", href="/static/common/bower/paper-dropdown-menu/paper-dropdown-menu.html")
link(rel="import", href="/static/common/bower/paper-toolbar/paper-toolbar.html")
link(rel="import", href="/static/common/bower/paper-icon-button/paper-icon-button.html")

link(rel="import", href="/static/common/bower/paper-tabs/paper-tabs.html")

link(rel="import", href="/static/common/bower/iron-form/iron-form.html")

link(rel="import", href="/static/common/bower/iron-ajax/iron-ajax.html")

link(rel="import", href="/app-render/framework/crouton-card/crouton-card.pug")
link(rel="import", href="/app-render/framework/crouton-device-card/crouton-device-card.pug")


dom-module(id="crouton-devices")
  template
    iron-ajax(id="ajax_device_list", auto='true', url='../../../public/common/active_device_list.json', last-response='{{active_device_list}}')
    iron-ajax(id="ajax_all_devices", auto='true', url='../../../public/common/all_devices.json', last-response='{{all_devices}}')
    link(rel="stylesheet", href="crouton-devices.css")
    crouton-card(drop-shadow="false", bottom-bar="false").grid__col.grid__col--12-of-12
      p.header
        span Devices
        template(is="dom-if", if="{{!devices.length}}")
          span.subTitle no devices
        template(is="dom-if", if="{{devices.length}}")
          span.subTitle
            span {{devices.length}}
            span   device(s)
      template(is="dom-repeat", items="{{devices}}")
        crouton-device-card(id="{{deviceId(item)}}", device-name="{{item}}")
      div
        paper-toolbar
          paper-dropdown-menu.grid__col--4-of-12(label="Select Available Device", horizontal-align="left", noink, no-animations, on-click="refreshAvail")
            paper-listbox.dropdown-content(selected="{{newDeviceName}}", attr-for-selected="id")
              // If there are no avail devices, show None Available, otherwise repeat through them
              template(is="dom-if", if="{{!active_device_list.0.length}}") 
                paper-item(id="none") None Available
              template(is="dom-if", if="{{active_device_list.0.length}}")   
                template(is="dom-repeat", items="{{active_device_list.0}}")
                  paper-item(id="{{item}}") {{item}}
          div.addButtons.grid__col--8-of-12
            paper-button(type="submit", disabled$="{{validateNewDeviceInput(newDeviceName)}}", on-click="addDevice", raised).rightBtn Add Device
        


  style(is='custom-style').
    paper-toolbar{
      --paper-toolbar-background: rgb(250,250,250);
      --paper-toolbar-content: {
        color: grey;
      };
    }
    paper-tabs{
      --paper-tabs-selection-bar-color: rgb(78,205,196);
    }
    paper-tab{
      padding-left: 10px;
      padding-right: 10px;
      padding-top: 30px;
      padding-bottom: 0px;
      font-size: 16px;
      --paper-tab-ink: rgb(78,205,196);
    }
    paper-input{
      --paper-input-container-focus-color: grey;
      padding: 20px;
    }

  script.
    (function() {
      Polymer({
        is: "crouton-devices",
        ready: function() {
          var that = this;
          this.devices = [];
          this.deviceObj = {};

          this.newDeviceName = '';

          this.deviceCardPrefix = "crouton-device-";

          this.mqttCard = document.getElementById("crouton-mqtt");
          this.mqttConnected = false;

          document.getElementById("crouton-frame").addEventListener("mqttConnection", function(event){
            that.mqttConnected = document.getElementById("crouton-mqtt").connected;
          });

        },
        properties: {
          active_device_list: Array,
          all_devices: Object,
        },
        listeners: {

        },
        attached: function(){
          if (this.mqttCard.storageAvailable('localStorage')) {
            var deviceList = localStorage.getItem("crouton-devicelist");
            if(deviceList){
              var deviceListJson = JSON.parse(deviceList);
              for(var i = 0; i < deviceListJson.devices.length; i++){
                this.addDevice(deviceListJson.devices[i]);
              }
            }
          }
        },
        refreshAvail: function() {
          this.$.ajax_device_list.generateRequest();
          this.$.ajax_all_devices.generateRequest();
          console.log(this.all_devices);
        },
        validateNewDeviceInput: function(newDeviceName,newPath){

          // stay disabled if none available is selected
          if (newDeviceName == 'none') {
            return true // stay disabled
          }

          //making sure there is a name not just white spaces... also need to filter special characteres later too .. true means add device button is disabled
          if((newDeviceName === null) || (newDeviceName.match(/^ *$/) !== null)){
              return true // stay disabled
          } else {
              return false // enable 
          }
        },
        deviceId: function(name){
          return this.deviceCardPrefix + name;
        },
        deviceValuePointer: function(name){
          this.values[name] = {};
          return this.values[name];
        },
        addDevice: function(name){
          var that = this;

          if(typeof(name) != "string") {
            name = this.newDeviceName;
          }
          // make sure name is unique
          if(this.devices.indexOf(name) === -1){
            
            
            console.log("from devices ... this all devices .. ", this.all_devices);
            console.log("from devices ... this all devices [name", this.all_devices[name]);
            
            this.assembledJson = this.all_devices[name];
            console.log("from devices ... this assembledJson ", this.assembledJson);



            // now includes assembledJson to pass through to connect-mqtt function 
            this.async(function(){
            this.connectDevice(name,this.assembledJson);
            }, 100);

            // push name to devices
            this.push('devices', name);
            // form clearing moved to this.connectDevice so that buildJson retains cardMenuSelection

          } else {
            this.fire('makeToast', { message: "Uh on! <b>" + name + "</b> already exists as a device", duration: 2000 });
            this.newDeviceName = '';
          }
        },
        removeDevice: function(name){
          var index = this.devices.indexOf(name);
          if (index > -1) {
              this.splice('devices', index, 1);
          }
        },
        connectDevice: function(name,assembledJson){
          console.log("devices connectDevice ..");
          console.log(assembledJson);
          //- console.log(JSON.stringify(assembledJson));
          document.getElementById(this.deviceCardPrefix + name).connectDevice(name,this,assembledJson);

          // clear form
          this.newDeviceName = '';

        },
        disconnectAllDevices: function(){
          for(var device in this.devices){
            if(typeof(this.devices[device]) == "string"){
              document.getElementById(this.deviceCardPrefix + name).disconnectDevice();
            }
          }
        },
        addDemo: function(){
          this.addDevice("crouton-demo");
        }
      });
    }());
