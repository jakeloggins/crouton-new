link(rel="import", href="/static/common/bower/polymer/polymer.html")
link(rel="import", href="/static/common/bower/paper-input/paper-input.html")
link(rel="import", href="/static/common/bower/paper-button/paper-button.html")

link(rel="import", href="/static/common/bower/paper-item/paper-item.html")
link(rel="import", href="/static/common/bower/paper-listbox/paper-listbox.html")
link(rel="import", href="/static/common/bower/paper-dropdown-menu/paper-dropdown-menu.html")
link(rel="import", href="/static/common/bower/paper-toolbar/paper-toolbar.html")
link(rel="import", href="/static/common/bower/paper-icon-button/paper-icon-button.html")

link(rel="import", href="/static/common/bower/paper-tabs/paper-tabs.html")
link(rel="import", href="/static/common/bower/paper-tabs/paper-tabs.html")

link(rel="import", href="/static/common/bower/iron-form/iron-form.html")
link(rel="import", href="/app-render/framework/crouton-card/crouton-card.jade")
link(rel="import", href="/app-render/framework/crouton-device-card/crouton-device-card.jade")


dom-module(id="crouton-devices")
  template
    link(rel="stylesheet", href="crouton-devices.css")
    crouton-card(drop-shadow="false", bottom-bar="false").grid__col.grid__col--12-of-12
      p.header
        span Devices
        template(is="dom-if", if="{{!devices.length}}")
          span.subTitle no devices
        template(is="dom-if", if="{{devices.length}}")
          span.subTitle
            span {{devices.length}}
            span   device(s)
      template(is="dom-repeat", items="{{devices}}")
        crouton-device-card(id="{{deviceId(item)}}", device-name="{{item}}")
      div
        paper-toolbar
          paper-input.grid__col--3-of-12(label="Enter new device name", type="text", value="{{newDeviceName::input}}", on-keypress="keyCheck", required)
          paper-tabs(id="card_menu", selected="{{cardMenuSelection}}" attr-for-selected="id", on-click="validateCardType", noInk)
            paper-tab(id="simple_text") Text
            paper-tab(id="simple_input") Input
            paper-tab(id="simple_slider") Slider
            paper-tab(id="simple_button") Button
            paper-tab(id="simple_toggle") Toggle
            paper-tab(id="line_chart") Line Chart
            paper-tab(id="rgb_slider") RGB Slider
          paper-input.grid__col--3-of-12(label="Enter path", type="text", value="{{newPath::input}}", on-keypress="keyCheck", required)
        paper-toolbar
          paper-input.grid__col--3-of-12(label="Enter card title", type="text", value="{{newCardTitle::input}}", on-keypress="keyCheck", required)
          paper-input.grid__col--2-of-12(label="{{UnitsOptional}}", type="text", value="{{newUnits::input}}", on-keypress="keyCheck", disabled="{{!newUnitsEnabled}}", required="{{newUnitsRequired}}")
          paper-input.grid__col--2-of-12(label="{{MinOptional}}", type="text", value="{{newUnitsMin::input}}", on-keypress="keyCheck", disabled="{{!newUnitsMinEnabled}}", required="{{newUnitsMinRequired}}")
          paper-input.grid__col--2-of-12(label="{{MaxOptional}}", type="text", value="{{newUnitsMax::input}}", on-keypress="keyCheck", disabled="{{!newUnitsMaxEnabled}}", required="{{newUnitsMaxRequired}}")  
          div.addButtons.grid__col--3-of-12
            paper-button(type="submit", disabled$="{{validateNewDeviceInput(newDeviceName,newPath,newCardTitle,cardMenuSelection)}}", on-click="addDevice", raised).rightBtn Add Device
        
        //paper-toolbar
          paper-dialog
            paper-item Header
            paper-dialog-scrollable Lorem ipsum...


  style(is='custom-style').
    paper-toolbar{
      --paper-toolbar-background: rgb(250,250,250);
      --paper-toolbar-content: {
        color: grey;
      };
    }
    paper-tabs{
      --paper-tabs-selection-bar-color: rgb(78,205,196);
    }
    paper-tab{
      padding-left: 10px;
      padding-right: 10px;
      padding-top: 30px;
      padding-bottom: 0px;
      font-size: 16px;
      --paper-tab-ink: rgb(78,205,196);
    }
    paper-input{
      --paper-input-container-focus-color: grey;
      padding: 20px;
    }

  script.
    (function() {
      Polymer({
        is: "crouton-devices",
        ready: function() {
          var that = this;
          this.devices = [];
          this.newDeviceName = '';
          this.newPath = '';
          this.newCardTitle = '';
          this.newUnits = '';
          this.newUnitsMin = '';
          this.newUnitsMax = '';
          this.newUnitsEnabled = false;
          this.newUnitsMinEnabled = false;
          this.newUnitsMaxEnabled = false;
          this.newUnitsRequired = false;
          this.newUnitsMinRequired = false;
          this.newUnitsMaxRequired = false;
          this.UnitsOptional = '';
          this.MinOptional = '';
          this.MaxOptional = '';
          this.cardMenuSelection = '';

          this.deviceCardPrefix = "crouton-device-";

          this.mqttCard = document.getElementById("crouton-mqtt");
          this.mqttConnected = false;

          document.getElementById("crouton-frame").addEventListener("mqttConnection", function(event){
            that.mqttConnected = document.getElementById("crouton-mqtt").connected;
          });

        },
        properties: {

        },
        listeners: {

        },
        attached: function(){
          if (this.mqttCard.storageAvailable('localStorage')) {
            var deviceList = localStorage.getItem("crouton-devicelist");
            if(deviceList){
              var deviceListJson = JSON.parse(deviceList);
              for(var i = 0; i < deviceListJson.devices.length; i++){
                this.addDevice(deviceListJson.devices[i]);
              }
            }
          }
        },
        validateCardType: function(e){
          switch (this.cardMenuSelection) {
            case 'simple_text':
                this.newUnitsEnabled = true;
                this.newUnitsMinEnabled = false;
                this.newUnitsMaxEnabled = false;

                this.newUnitsRequired = false;
                this.newUnitsMinRequired = false;
                this.newUnitsMaxRequired = false;

                this.UnitsOptional = 'Enter units (optional)';
                this.MinOptional = '';
                this.MaxOptional = '';
                break;
            case 'simple_input':
                this.newUnitsEnabled = false;
                this.newUnitsMinEnabled = false;
                this.newUnitsMaxEnabled = false;

                this.newUnitsRequired = false;
                this.newUnitsMinRequired = false;
                this.newUnitsMaxRequired = false;

                this.UnitsOptional = '';
                this.MinOptional = '';
                this.MaxOptional = '';
                break;
            case 'simple_slider':
                this.newUnitsEnabled = true;
                this.newUnitsMinEnabled = true;
                this.newUnitsMaxEnabled = true;

                this.newUnitsRequired = false;
                this.newUnitsMinRequired = true;
                this.newUnitsMaxRequired = true;

                this.UnitsOptional = 'Enter units (optional)';
                this.MinOptional = 'min value (required)';
                this.MaxOptional = 'max value (required)';
                break;
            case 'simple_button':
                this.newUnitsEnabled = true;
                this.newUnitsMinEnabled = false;
                this.newUnitsMaxEnabled = false;

                this.newUnitsRequired = false;
                this.newUnitsMinRequired = false;
                this.newUnitsMaxRequired = false;

                this.UnitsOptional = 'Enter icon name (optional)';
                this.MinOptional = '';
                this.MaxOptional = '';
                break;
            case 'simple_toggle':
                override = true;
                
                this.newUnitsEnabled = false;
                this.newUnitsMinEnabled = true;
                this.newUnitsMaxEnabled = true;

                this.newUnitsRequired = false;
                this.newUnitsMinRequired = false;
                this.newUnitsMaxRequired = false;

                this.UnitsOptional = '';
                this.MinOptional = 'default: "OFF"';
                this.MaxOptional = 'default: "ON"';
                break;
            case 'line_chart':
                this.newUnitsEnabled = false;
                this.newUnitsMinEnabled = true;
                this.newUnitsMaxEnabled = true;

                this.newUnitsRequired = false;
                this.newUnitsMinRequired = false;
                this.newUnitsMaxRequired = false;

                this.UnitsOptional = '';
                this.MinOptional = 'min y-axis (default: 0)';
                this.MaxOptional = 'max y-axis (default: 100)';
                break;
            case 'rgb_slider':
                this.newUnitsEnabled = false;
                this.newUnitsMinEnabled = true;
                this.newUnitsMaxEnabled = true;

                this.newUnitsRequired = false;
                this.newUnitsMinRequired = true;
                this.newUnitsMaxRequired = true;

                this.UnitsOptional = '';
                this.MinOptional = 'min value (required)';
                this.MaxOptional = 'max value (required)';
                break;
          }
        },
        validateNewDeviceInput: function(newDeviceName,newPath,newCardTitle,cardMenuSelection){
          //making sure there is a name not just white spaces... also need to filter special characteres later too
          if((newDeviceName && newPath && newCardTitle && cardMenuSelection === null) || (newCardTitle.match(/^ *$/) || newDeviceName.match(/^ *$/) || newPath.match(/^ *$/) || cardMenuSelection.match(/^ *$/) !== null)){
            return true
          } else {
            return false
          }
        },
        deviceId: function(name){
          return this.deviceCardPrefix + name;
        },
        deviceValuePointer: function(name){
          this.values[name] = {};
          return this.values[name];
        },
        keyCheck: function(event){
          if(event.keyCode == 13){
            event.preventDefault();
            this.addDevice();
          }
        },
        addDevice: function(name){
          var that = this;
          // this is how you grab stuff from the forms
          // assign values to buttons, then see which one is true
          if(typeof(name) != "string") {
            name = this.newDeviceName;
          }
          if(this.devices.indexOf(name) === -1){
            this.push('devices', name);
            this.newDeviceName = '';
            this.newPath = '';
            this.newCardTitle = '';
            this.newUnits = '';
            this.newUnitsMin = '';
            this.newUnitsMax = '';
            this.UnitsOptional = '';
            this.MinOptional = '';
            this.MaxOptional = '';
            this.cardMenuSelection = '';
            this.newUnitsEnabled = false;
            this.newUnitsMinEnabled = false;
            this.newUnitsMaxEnabled = false;
            this.newUnitsRequired = false;
            this.newUnitsMinRequired = false;
            this.newUnitsMaxRequired = false;
            this.async(function(){
            this.connectDevice(name);
            }, 100);
          } else {
            this.fire('makeToast', { message: "Uh on! <b>" + name + "</b> already exists as a device", duration: 2000 });
          }
        },
        removeDevice: function(name){
          var index = this.devices.indexOf(name);
          if (index > -1) {
              this.splice('devices', index, 1);
          }
        },
        connectDevice: function(name,autoAdd){
          document.getElementById(this.deviceCardPrefix + name).connectDevice();
        },
        disconnectAllDevices: function(){
          for(var device in this.devices){
            if(typeof(this.devices[device]) == "string"){
              document.getElementById(this.deviceCardPrefix + name).disconnectDevice();
            }
          }
        },
        addDemo: function(){
          this.addDevice("crouton-demo");
        }
      });
    }());
