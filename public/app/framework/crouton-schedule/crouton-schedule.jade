link(rel="import", href="/static/common/bower/polymer/polymer.html")
link(rel="import", href="/static/common/bower/paper-input/paper-input.html")
link(rel="import", href="/static/common/bower/paper-button/paper-button.html")

link(rel="import", href="/static/common/bower/paper-item/paper-item.html")
link(rel="import", href="/static/common/bower/paper-listbox/paper-listbox.html")
link(rel="import", href="/static/common/bower/paper-dropdown-menu/paper-dropdown-menu.html")
link(rel="import", href="/static/common/bower/paper-toolbar/paper-toolbar.html")
link(rel="import", href="/static/common/bower/paper-icon-button/paper-icon-button.html")

link(rel="import", href="/static/common/bower/paper-tabs/paper-tabs.html")
link(rel="import", href="/static/common/bower/paper-tabs/paper-tabs.html")

link(rel="import", href="/static/common/bower/iron-form/iron-form.html")
link(rel="import", href="/app-render/framework/crouton-card/crouton-card.jade")
link(rel="import", href="/app-render/framework/crouton-schedule-card/crouton-schedule-card.jade")

link(rel="import", href="/static/common/bower/iron-ajax/iron-ajax.html")


dom-module(id="crouton-schedule")
  template
    iron-ajax(id="ajax", auto='true', url='../../../public/common/schedule_data.json', last-response='{{schedules}}')
    link(rel="stylesheet", href="crouton-schedule.css")
    crouton-card(drop-shadow="false", bottom-bar="false").grid__col.grid__col--12-of-12
      p.header
        span Schedules
      template(is="dom-repeat", items="{{_toArray(schedules)}}" as="init_obj")
        template(is="dom-repeat", items="{{_toArray(init_obj.value)}}" as="device")
          template(is="dom-repeat", items="{{_toArray(device.value)}}" as="endpoint")
            crouton-schedule-card(id="{{scheduleId(device.name, endpoint.name)}}", schedule-name="{{endpoint.name}}" device-name="{{device.name}}" schedule-json="{{endpoint.value}}")
      div
        paper-toolbar
          paper-input.grid__col--6-of-12(label="Enter plain language schedule", type="text", value="{{newSchedLanguage::input}}", required)
          paper-tabs(id="sched_menu", selected="{{actionSelection}}" attr-for-selected="id", selectedindex="0", on-click="validateActionType", noInk)
            paper-tab(id="toggle") Toggle
            paper-tab(id="button") Button
            paper-tab(id="slide_to") Slide
            paper-tab(id="slide_above") Slide Above
            paper-tab(id="slide_below") Slide Below
          paper-input.grid__col--1-of-12(label="Enter value", type="text", value="{{newSchedValue::input}}", disabled="{{!newSchedValueEnabled}}", required)
        paper-toolbar
          paper-input.grid__col--4-of-12(label="Enter path", type="text", value="{{newSchedPath::input}}", required)
          paper-input.grid__col--3-of-12(label="Enter device name" type="text", value="{{newSchedDeviceName::input}}", required)
          paper-input.grid__col--3-of-12(label="Enter device endpoint", type="text", value="{{newSchedEndpoint::input}}", required)
          div.addButtons.grid__col--2-of-12
            paper-button(type="submit", disabled$="{{validateNewScheduleInput(newSchedPath,newSchedDeviceName,newSchedEndpoint,newSchedLanguage,actionSelection)}}", on-click="addScheduleCard", raised).rightBtn Add Schedule


  style(is='custom-style').
    paper-toolbar{
      --paper-toolbar-background: rgb(250,250,250);
      --paper-toolbar-content: {
        color: grey;
      };
    }
    paper-tabs{
      --paper-tabs-selection-bar-color: rgb(78,205,196);
    }
    paper-tab{
      padding-left: 10px;
      padding-right: 10px;
      padding-top: 30px;
      padding-bottom: 0px;
      font-size: 16px;
      --paper-tab-ink: rgb(78,205,196);
    }
    paper-input{
      --paper-input-container-focus-color: grey;
      padding: 20px;
    }

  script.
    (function() {
      Polymer({
        is: "crouton-schedule",
        ready: function() {
          this.scheduleCardPrefix = "crouton-schedule-";

          this.actionSelection = '';
          this.newSchedDeviceName = '';
          this.newSchedPath = '';
          this.newSchedEndpoint = '';
          this.newSchedLanguage = '';
          this.newSchedValue = '';
          this.newSchedValueEnabled = false;

        },
        properties: {
          schedules: Object,
        },
        listeners: {

        },
        attached: function() {
          this.mqttCard = document.getElementById("crouton-mqtt");
        },
        _toArray: function(obj) {
            return Object.keys(obj).map(function(key) {
                return {
                    name: key,
                    value: obj[key]
                };
            });
        },
        scheduleId: function(device_name, endpoint){
          return this.scheduleCardPrefix + device_name + "-" + endpoint;
        },
        validateNewScheduleInput: function(newSchedPath,newSchedDeviceName,newSchedEndpoint,newSchedLanguage,actionSelection){
          //making sure there is a name not just white spaces... also need to filter special characteres later too .. true means add device button is disabled
          if((newSchedDeviceName && newSchedPath && newSchedEndpoint && newSchedLanguage === null) || (newSchedDeviceName.match(/^ *$/) || newSchedEndpoint.match(/^ *$/) || newSchedPath.match(/^ *$|confirm|control|log|errors|clear|clearall/) || actionSelection.match(/^ *$/) !== null)){
            return true // stay disabled
          } else {
              return false // enable 
          }
        },
        validateActionType: function(){
          if (this.actionSelection == "button") {
            this.newSchedValueEnabled = false;
            this.newSchedValue = '';
          } else {
            this.newSchedValueEnabled = true;
          }
        },
        addScheduleCard: function(){
          // make sure newPath has beginning slash and no end slash
          if(this.newSchedPath.charAt(0) != "/" && this.newSchedPath != "") {
            slash = "/";
            this.newSchedPath = slash.concat(this.newSchedPath);
          }
          if(this.newSchedPath.slice(-1) == "/") {
            this.newSchedPath = this.newSchedPath.slice(0, -1);
          }
          this.mqttCard.publishMessage("/schedule"+this.newSchedPath+"/"+this.actionSelection+"/"+this.newSchedDeviceName+"/"+this.newSchedEndpoint+"/"+this.newSchedValue, this.newSchedLanguage);
          this.delayRefreshSchedules();
          this.clearVariables();

        },
        clearAllSchedules: function(){
          // publish to / schedule / clearall, no payload
          this.mqttCard.publishMessage("/schedule/clearall", "clear");
          this.delayRefreshSchedules();
        },
        refreshSchedules: function(){
          // update schedules array from JSON file
          //this.schedules_count = 0;
          this.$.ajax.generateRequest();
        },
        delayRefreshSchedules: function(){
          this.async(function(){
            this.refreshSchedules();
            }, 1000);
        },
        clearVariables: function() {
          this.actionSelection = '';
          this.newSchedDeviceName = '';
          this.newSchedPath = '';
          this.newSchedEndpoint = '';
          this.newSchedLanguage = '';
          this.newSchedValue = '';
          this.newSchedValue = '';
          this.newSchedValueEnabled = false;
        }
      });
    }());
